// Code generated by go-swagger; DO NOT EDIT.

package priorities

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new priorities API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for priorities API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1PrioritiesPrioritySlug(params *DeleteV1PrioritiesPrioritySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1PrioritiesPrioritySlugOK, error)

	GetV1Priorities(params *GetV1PrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PrioritiesOK, error)

	GetV1PrioritiesPrioritySlug(params *GetV1PrioritiesPrioritySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PrioritiesPrioritySlugOK, error)

	PatchV1PrioritiesPrioritySlug(params *PatchV1PrioritiesPrioritySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1PrioritiesPrioritySlugOK, error)

	PostV1Priorities(params *PostV1PrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1PrioritiesCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1PrioritiesPrioritySlug deletes a specific priority

Delete a specific priority
*/
func (a *Client) DeleteV1PrioritiesPrioritySlug(params *DeleteV1PrioritiesPrioritySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1PrioritiesPrioritySlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1PrioritiesPrioritySlugParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1PrioritiesPrioritySlug",
		Method:             "DELETE",
		PathPattern:        "/v1/priorities/{priority_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1PrioritiesPrioritySlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1PrioritiesPrioritySlugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1PrioritiesPrioritySlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1Priorities lists priorities

Lists priorities
*/
func (a *Client) GetV1Priorities(params *GetV1PrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PrioritiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PrioritiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1Priorities",
		Method:             "GET",
		PathPattern:        "/v1/priorities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1PrioritiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1PrioritiesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1Priorities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1PrioritiesPrioritySlug retrieves a specific priority

Retrieve a specific priority
*/
func (a *Client) GetV1PrioritiesPrioritySlug(params *GetV1PrioritiesPrioritySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1PrioritiesPrioritySlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1PrioritiesPrioritySlugParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1PrioritiesPrioritySlug",
		Method:             "GET",
		PathPattern:        "/v1/priorities/{priority_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1PrioritiesPrioritySlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1PrioritiesPrioritySlugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1PrioritiesPrioritySlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1PrioritiesPrioritySlug updates a specific priority

Update a specific priority
*/
func (a *Client) PatchV1PrioritiesPrioritySlug(params *PatchV1PrioritiesPrioritySlugParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1PrioritiesPrioritySlugOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1PrioritiesPrioritySlugParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1PrioritiesPrioritySlug",
		Method:             "PATCH",
		PathPattern:        "/v1/priorities/{priority_slug}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1PrioritiesPrioritySlugReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1PrioritiesPrioritySlugOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1PrioritiesPrioritySlug: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1Priorities creates priority

Create a new priority
*/
func (a *Client) PostV1Priorities(params *PostV1PrioritiesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1PrioritiesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1PrioritiesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1Priorities",
		Method:             "POST",
		PathPattern:        "/v1/priorities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1PrioritiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1PrioritiesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1Priorities: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
