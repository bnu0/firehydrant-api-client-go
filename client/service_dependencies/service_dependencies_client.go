// Code generated by go-swagger; DO NOT EDIT.

package service_dependencies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new service dependencies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service dependencies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteV1ServiceDependenciesServiceDependencyID(params *DeleteV1ServiceDependenciesServiceDependencyIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1ServiceDependenciesServiceDependencyIDOK, error)

	GetV1ServiceDependenciesServiceDependencyID(params *GetV1ServiceDependenciesServiceDependencyIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ServiceDependenciesServiceDependencyIDOK, error)

	PatchV1ServiceDependenciesServiceDependencyID(params *PatchV1ServiceDependenciesServiceDependencyIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1ServiceDependenciesServiceDependencyIDOK, error)

	PostV1ServiceDependencies(params *PostV1ServiceDependenciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ServiceDependenciesCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteV1ServiceDependenciesServiceDependencyID deletes a service dependency

Deletes a single service dependency
*/
func (a *Client) DeleteV1ServiceDependenciesServiceDependencyID(params *DeleteV1ServiceDependenciesServiceDependencyIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteV1ServiceDependenciesServiceDependencyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteV1ServiceDependenciesServiceDependencyIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteV1ServiceDependenciesServiceDependencyId",
		Method:             "DELETE",
		PathPattern:        "/v1/service_dependencies/{service_dependency_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteV1ServiceDependenciesServiceDependencyIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteV1ServiceDependenciesServiceDependencyIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteV1ServiceDependenciesServiceDependencyId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetV1ServiceDependenciesServiceDependencyID retrieves a single service dependency

Retrieves a single service dependency by ID
*/
func (a *Client) GetV1ServiceDependenciesServiceDependencyID(params *GetV1ServiceDependenciesServiceDependencyIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetV1ServiceDependenciesServiceDependencyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetV1ServiceDependenciesServiceDependencyIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getV1ServiceDependenciesServiceDependencyId",
		Method:             "GET",
		PathPattern:        "/v1/service_dependencies/{service_dependency_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetV1ServiceDependenciesServiceDependencyIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetV1ServiceDependenciesServiceDependencyIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getV1ServiceDependenciesServiceDependencyId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PatchV1ServiceDependenciesServiceDependencyID updates a service dependency

Update the notes of the service dependency
*/
func (a *Client) PatchV1ServiceDependenciesServiceDependencyID(params *PatchV1ServiceDependenciesServiceDependencyIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchV1ServiceDependenciesServiceDependencyIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchV1ServiceDependenciesServiceDependencyIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchV1ServiceDependenciesServiceDependencyId",
		Method:             "PATCH",
		PathPattern:        "/v1/service_dependencies/{service_dependency_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchV1ServiceDependenciesServiceDependencyIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchV1ServiceDependenciesServiceDependencyIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchV1ServiceDependenciesServiceDependencyId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostV1ServiceDependencies creates a service dependency

Creates a service dependency relationship between two services
*/
func (a *Client) PostV1ServiceDependencies(params *PostV1ServiceDependenciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostV1ServiceDependenciesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostV1ServiceDependenciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postV1ServiceDependencies",
		Method:             "POST",
		PathPattern:        "/v1/service_dependencies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostV1ServiceDependenciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostV1ServiceDependenciesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postV1ServiceDependencies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
