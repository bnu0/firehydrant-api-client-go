// Code generated by go-swagger; DO NOT EDIT.

package post_mortems

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/firehydrant/api-client-go/models"
)

// PatchV1PostMortemsReportsReportIDEventsReportEventIDReader is a Reader for the PatchV1PostMortemsReportsReportIDEventsReportEventID structure.
type PatchV1PostMortemsReportsReportIDEventsReportEventIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchV1PostMortemsReportsReportIDEventsReportEventIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchV1PostMortemsReportsReportIDEventsReportEventIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchV1PostMortemsReportsReportIDEventsReportEventIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchV1PostMortemsReportsReportIDEventsReportEventIDOK creates a PatchV1PostMortemsReportsReportIDEventsReportEventIDOK with default headers values
func NewPatchV1PostMortemsReportsReportIDEventsReportEventIDOK() *PatchV1PostMortemsReportsReportIDEventsReportEventIDOK {
	return &PatchV1PostMortemsReportsReportIDEventsReportEventIDOK{}
}

/*
PatchV1PostMortemsReportsReportIDEventsReportEventIDOK describes a response with status code 200, with default header values.

Updates a report event to change its description
*/
type PatchV1PostMortemsReportsReportIDEventsReportEventIDOK struct {
	Payload *models.EventEntity
}

// IsSuccess returns true when this patch v1 post mortems reports report Id events report event Id o k response has a 2xx status code
func (o *PatchV1PostMortemsReportsReportIDEventsReportEventIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch v1 post mortems reports report Id events report event Id o k response has a 3xx status code
func (o *PatchV1PostMortemsReportsReportIDEventsReportEventIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch v1 post mortems reports report Id events report event Id o k response has a 4xx status code
func (o *PatchV1PostMortemsReportsReportIDEventsReportEventIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch v1 post mortems reports report Id events report event Id o k response has a 5xx status code
func (o *PatchV1PostMortemsReportsReportIDEventsReportEventIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch v1 post mortems reports report Id events report event Id o k response a status code equal to that given
func (o *PatchV1PostMortemsReportsReportIDEventsReportEventIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchV1PostMortemsReportsReportIDEventsReportEventIDOK) Error() string {
	return fmt.Sprintf("[PATCH /v1/post_mortems/reports/{report_id}/events/{report_event_id}][%d] patchV1PostMortemsReportsReportIdEventsReportEventIdOK  %+v", 200, o.Payload)
}

func (o *PatchV1PostMortemsReportsReportIDEventsReportEventIDOK) String() string {
	return fmt.Sprintf("[PATCH /v1/post_mortems/reports/{report_id}/events/{report_event_id}][%d] patchV1PostMortemsReportsReportIdEventsReportEventIdOK  %+v", 200, o.Payload)
}

func (o *PatchV1PostMortemsReportsReportIDEventsReportEventIDOK) GetPayload() *models.EventEntity {
	return o.Payload
}

func (o *PatchV1PostMortemsReportsReportIDEventsReportEventIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.EventEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchV1PostMortemsReportsReportIDEventsReportEventIDBadRequest creates a PatchV1PostMortemsReportsReportIDEventsReportEventIDBadRequest with default headers values
func NewPatchV1PostMortemsReportsReportIDEventsReportEventIDBadRequest() *PatchV1PostMortemsReportsReportIDEventsReportEventIDBadRequest {
	return &PatchV1PostMortemsReportsReportIDEventsReportEventIDBadRequest{}
}

/*
PatchV1PostMortemsReportsReportIDEventsReportEventIDBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type PatchV1PostMortemsReportsReportIDEventsReportEventIDBadRequest struct {
	Payload *models.ErrorEntity
}

// IsSuccess returns true when this patch v1 post mortems reports report Id events report event Id bad request response has a 2xx status code
func (o *PatchV1PostMortemsReportsReportIDEventsReportEventIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch v1 post mortems reports report Id events report event Id bad request response has a 3xx status code
func (o *PatchV1PostMortemsReportsReportIDEventsReportEventIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch v1 post mortems reports report Id events report event Id bad request response has a 4xx status code
func (o *PatchV1PostMortemsReportsReportIDEventsReportEventIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch v1 post mortems reports report Id events report event Id bad request response has a 5xx status code
func (o *PatchV1PostMortemsReportsReportIDEventsReportEventIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch v1 post mortems reports report Id events report event Id bad request response a status code equal to that given
func (o *PatchV1PostMortemsReportsReportIDEventsReportEventIDBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchV1PostMortemsReportsReportIDEventsReportEventIDBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /v1/post_mortems/reports/{report_id}/events/{report_event_id}][%d] patchV1PostMortemsReportsReportIdEventsReportEventIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchV1PostMortemsReportsReportIDEventsReportEventIDBadRequest) String() string {
	return fmt.Sprintf("[PATCH /v1/post_mortems/reports/{report_id}/events/{report_event_id}][%d] patchV1PostMortemsReportsReportIdEventsReportEventIdBadRequest  %+v", 400, o.Payload)
}

func (o *PatchV1PostMortemsReportsReportIDEventsReportEventIDBadRequest) GetPayload() *models.ErrorEntity {
	return o.Payload
}

func (o *PatchV1PostMortemsReportsReportIDEventsReportEventIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorEntity)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
