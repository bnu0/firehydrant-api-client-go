// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchV1WebhooksWebhookID Update a specific webhook
//
// swagger:model patchV1WebhooksWebhookId
type PatchV1WebhooksWebhookID struct {

	// state
	// Enum: [active inactive]
	State string `json:"state,omitempty"`

	// url
	URL string `json:"url,omitempty"`
}

// Validate validates this patch v1 webhooks webhook Id
func (m *PatchV1WebhooksWebhookID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var patchV1WebhooksWebhookIdTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		patchV1WebhooksWebhookIdTypeStatePropEnum = append(patchV1WebhooksWebhookIdTypeStatePropEnum, v)
	}
}

const (

	// PatchV1WebhooksWebhookIDStateActive captures enum value "active"
	PatchV1WebhooksWebhookIDStateActive string = "active"

	// PatchV1WebhooksWebhookIDStateInactive captures enum value "inactive"
	PatchV1WebhooksWebhookIDStateInactive string = "inactive"
)

// prop value enum
func (m *PatchV1WebhooksWebhookID) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, patchV1WebhooksWebhookIdTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PatchV1WebhooksWebhookID) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch v1 webhooks webhook Id based on context it is used
func (m *PatchV1WebhooksWebhookID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchV1WebhooksWebhookID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchV1WebhooksWebhookID) UnmarshalBinary(b []byte) error {
	var res PatchV1WebhooksWebhookID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
