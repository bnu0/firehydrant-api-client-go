// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchV1IncidentsIncidentIDAlertsIncidentAlertIDPrimary Setting an alert as primary will overwrite milestone times in the FireHydrant incident with times included in the primary alert. Services attached to the primary alert will also be automatically added to the incident.
//
// swagger:model patchV1IncidentsIncidentIdAlertsIncidentAlertIdPrimary
type PatchV1IncidentsIncidentIDAlertsIncidentAlertIDPrimary struct {

	// primary
	// Required: true
	Primary *bool `json:"primary"`
}

// Validate validates this patch v1 incidents incident Id alerts incident alert Id primary
func (m *PatchV1IncidentsIncidentIDAlertsIncidentAlertIDPrimary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrimary(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PatchV1IncidentsIncidentIDAlertsIncidentAlertIDPrimary) validatePrimary(formats strfmt.Registry) error {

	if err := validate.Required("primary", "body", m.Primary); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this patch v1 incidents incident Id alerts incident alert Id primary based on context it is used
func (m *PatchV1IncidentsIncidentIDAlertsIncidentAlertIDPrimary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PatchV1IncidentsIncidentIDAlertsIncidentAlertIDPrimary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PatchV1IncidentsIncidentIDAlertsIncidentAlertIDPrimary) UnmarshalBinary(b []byte) error {
	var res PatchV1IncidentsIncidentIDAlertsIncidentAlertIDPrimary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
