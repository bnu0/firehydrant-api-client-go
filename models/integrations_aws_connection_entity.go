// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntegrationsAwsConnectionEntity Integrations_Aws_ConnectionEntity model
//
// swagger:model Integrations_Aws_ConnectionEntity
type IntegrationsAwsConnectionEntity struct {

	// aws account id
	AwsAccountID string `json:"aws_account_id,omitempty"`

	// connection status
	// Enum: [pending_setup role_assumed cant_assume_role invalid_permissions validated]
	ConnectionStatus string `json:"connection_status,omitempty"`

	// environment id
	EnvironmentID string `json:"environment_id,omitempty"`

	// environment name
	EnvironmentName string `json:"environment_name,omitempty"`

	// external id
	ExternalID string `json:"external_id,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// regions
	Regions []string `json:"regions"`

	// status description
	StatusDescription string `json:"status_description,omitempty"`

	// status text
	StatusText string `json:"status_text,omitempty"`

	// target arn
	TargetArn string `json:"target_arn,omitempty"`
}

// Validate validates this integrations aws connection entity
func (m *IntegrationsAwsConnectionEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var integrationsAwsConnectionEntityTypeConnectionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending_setup","role_assumed","cant_assume_role","invalid_permissions","validated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		integrationsAwsConnectionEntityTypeConnectionStatusPropEnum = append(integrationsAwsConnectionEntityTypeConnectionStatusPropEnum, v)
	}
}

const (

	// IntegrationsAwsConnectionEntityConnectionStatusPendingSetup captures enum value "pending_setup"
	IntegrationsAwsConnectionEntityConnectionStatusPendingSetup string = "pending_setup"

	// IntegrationsAwsConnectionEntityConnectionStatusRoleAssumed captures enum value "role_assumed"
	IntegrationsAwsConnectionEntityConnectionStatusRoleAssumed string = "role_assumed"

	// IntegrationsAwsConnectionEntityConnectionStatusCantAssumeRole captures enum value "cant_assume_role"
	IntegrationsAwsConnectionEntityConnectionStatusCantAssumeRole string = "cant_assume_role"

	// IntegrationsAwsConnectionEntityConnectionStatusInvalidPermissions captures enum value "invalid_permissions"
	IntegrationsAwsConnectionEntityConnectionStatusInvalidPermissions string = "invalid_permissions"

	// IntegrationsAwsConnectionEntityConnectionStatusValidated captures enum value "validated"
	IntegrationsAwsConnectionEntityConnectionStatusValidated string = "validated"
)

// prop value enum
func (m *IntegrationsAwsConnectionEntity) validateConnectionStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, integrationsAwsConnectionEntityTypeConnectionStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntegrationsAwsConnectionEntity) validateConnectionStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectionStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateConnectionStatusEnum("connection_status", "body", m.ConnectionStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this integrations aws connection entity based on context it is used
func (m *IntegrationsAwsConnectionEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IntegrationsAwsConnectionEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntegrationsAwsConnectionEntity) UnmarshalBinary(b []byte) error {
	var res IntegrationsAwsConnectionEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
