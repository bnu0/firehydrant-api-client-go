// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IncidentsMilestoneEntity incidents milestone entity
//
// swagger:model Incidents_MilestoneEntity
type IncidentsMilestoneEntity struct {

	// created at
	CreatedAt string `json:"created_at,omitempty"`

	// ISO 8601 Duration Format
	Duration string `json:"duration,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// occurred at
	// Format: date-time
	OccurredAt strfmt.DateTime `json:"occurred_at,omitempty"`

	// type
	// Enum: [started detected acknowledged investigating identified mitigated resolved postmortem_started postmortem_completed closed]
	Type string `json:"type,omitempty"`

	// updated at
	UpdatedAt string `json:"updated_at,omitempty"`
}

// Validate validates this incidents milestone entity
func (m *IncidentsMilestoneEntity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOccurredAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IncidentsMilestoneEntity) validateOccurredAt(formats strfmt.Registry) error {
	if swag.IsZero(m.OccurredAt) { // not required
		return nil
	}

	if err := validate.FormatOf("occurred_at", "body", "date-time", m.OccurredAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var incidentsMilestoneEntityTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["started","detected","acknowledged","investigating","identified","mitigated","resolved","postmortem_started","postmortem_completed","closed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		incidentsMilestoneEntityTypeTypePropEnum = append(incidentsMilestoneEntityTypeTypePropEnum, v)
	}
}

const (

	// IncidentsMilestoneEntityTypeStarted captures enum value "started"
	IncidentsMilestoneEntityTypeStarted string = "started"

	// IncidentsMilestoneEntityTypeDetected captures enum value "detected"
	IncidentsMilestoneEntityTypeDetected string = "detected"

	// IncidentsMilestoneEntityTypeAcknowledged captures enum value "acknowledged"
	IncidentsMilestoneEntityTypeAcknowledged string = "acknowledged"

	// IncidentsMilestoneEntityTypeInvestigating captures enum value "investigating"
	IncidentsMilestoneEntityTypeInvestigating string = "investigating"

	// IncidentsMilestoneEntityTypeIdentified captures enum value "identified"
	IncidentsMilestoneEntityTypeIdentified string = "identified"

	// IncidentsMilestoneEntityTypeMitigated captures enum value "mitigated"
	IncidentsMilestoneEntityTypeMitigated string = "mitigated"

	// IncidentsMilestoneEntityTypeResolved captures enum value "resolved"
	IncidentsMilestoneEntityTypeResolved string = "resolved"

	// IncidentsMilestoneEntityTypePostmortemStarted captures enum value "postmortem_started"
	IncidentsMilestoneEntityTypePostmortemStarted string = "postmortem_started"

	// IncidentsMilestoneEntityTypePostmortemCompleted captures enum value "postmortem_completed"
	IncidentsMilestoneEntityTypePostmortemCompleted string = "postmortem_completed"

	// IncidentsMilestoneEntityTypeClosed captures enum value "closed"
	IncidentsMilestoneEntityTypeClosed string = "closed"
)

// prop value enum
func (m *IncidentsMilestoneEntity) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, incidentsMilestoneEntityTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IncidentsMilestoneEntity) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this incidents milestone entity based on context it is used
func (m *IncidentsMilestoneEntity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IncidentsMilestoneEntity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IncidentsMilestoneEntity) UnmarshalBinary(b []byte) error {
	var res IncidentsMilestoneEntity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
